# Daily Diary - Day 24

## Mini Project & Comprehensive Review

### Today's Topics
- Student Management System Implementation
- Full Stack Java Application Development
- Integration of All Learned Concepts
- Code Architecture and Best Practices
- Project Documentation

### Practical Work
**Project: Student Management System**
- Designed complete system architecture
- Implemented all CRUD operations with validation
- Added advanced search and filtering capabilities
- Created statistical reporting features
- Implemented file-based data persistence
- Added comprehensive error handling

### Code Implementation
```java
// Main application entry point
public class StudentManagementSystem {
    private StudentManagementService service;
    private Scanner scanner;
    
    public StudentManagementSystem() {
        this.service = new StudentManagementService("students.dat");
        this.scanner = new Scanner(System.in);
    }
    
    public void start() {
        displayWelcomeMessage();
        
        while (true) {
            displayMainMenu();
            int choice = getIntInput("Enter your choice: ");
            
            try {
                processUserChoice(choice);
            } catch (StudentManagementException e) {
                System.out.println("Operation failed: " + e.getMessage());
            } catch (Exception e) {
                System.out.println("Unexpected error: " + e.getMessage());
            }
        }
    }
    
    private void processUserChoice(int choice) throws StudentManagementException {
        switch (choice) {
            case 1 -> addStudentOperation();
            case 2 -> viewAllStudentsOperation();
            case 3 -> searchStudentOperation();
            case 4 -> updateStudentOperation();
            case 5 -> deleteStudentOperation();
            case 6 -> generateReportsOperation();
            case 7 -> systemStatisticsOperation();
            case 0 -> exitApplication();
            default -> System.out.println("Invalid choice! Please try again.");
        }
    }
    
    private void addStudentOperation() throws StudentManagementException {
        System.out.println("\n--- Add New Student ---");
        Student student = collectStudentData(true);
        service.addStudent(student);
        System.out.println("âœ… Student added successfully!");
    }
    
    private Student collectStudentData(boolean requireId) {
        int id = requireId ? getIntInput("Enter Student ID: ") : 0;
        String name = getValidatedName();
        int age = getValidatedAge();
        String grade = getValidatedGrade();
        double gpa = getValidatedGPA();
        
        return new Student(id, name, age, grade, gpa);
    }
    
    private String getValidatedName() {
        while (true) {
            String name = getStringInput("Enter Student Name: ");
            if (name.length() >= 2 && name.length() <= 50) {
                return name;
            }
            System.out.println("Name must be between 2 and 50 characters.");
        }
    }
}

// Core service class implementing business logic
class StudentManagementService {
    private Map<Integer, Student> students;
    private String dataFile;
    private int nextStudentId;
    
    public StudentManagementService(String dataFile) {
        this.dataFile = dataFile;
        this.students = new HashMap<>();
        loadStudentsFromFile();
        calculateNextStudentId();
    }
    
    public void addStudent(Student student) throws StudentManagementException {
        validateStudentData(student);
        
        if (students.containsKey(student.getId())) {
            throw new StudentManagementException(
                "Student with ID " + student.getId() + " already exists"
            );
        }
        
        students.put(student.getId(), student);
        saveStudentsToFile();
    }
    
    private void validateStudentData(Student student) throws StudentManagementException {
        if (student.getName() == null || student.getName().trim().isEmpty()) {
            throw new StudentManagementException("Student name cannot be empty");
        }
        if (student.getAge() < 5 || student.getAge() > 100) {
            throw new StudentManagementException("Age must be between 5 and 100");
        }
        if (student.getGpa() < 0.0 || student.getGpa() > 4.0) {
            throw new StudentManagementException("GPA must be between 0.0 and 4.0");
        }
    }
    
    public List<Student> searchStudents(SearchCriteria criteria) {
        return students.values().stream()
                      .filter(criteria::matches)
                      .sorted(Comparator.comparing(Student::getName))
                      .collect(Collectors.toList());
    }
    
    public StudentStatistics generateStatistics() {
        DoubleSummaryStatistics gpaStats = students.values().stream()
                .mapToDouble(Student::getGpa)
                .summaryStatistics();
                
        Map<String, Long> gradeDistribution = students.values().stream()
                .collect(Collectors.groupingBy(Student::getGrade, Collectors.counting()));
                
        return new StudentStatistics(gpaStats, gradeDistribution, students.size());
    }
}

// Search criteria for flexible student filtering
class SearchCriteria {
    private String name;
    private String grade;
    private Double minGpa;
    private Double maxGpa;
    private Integer minAge;
    private Integer maxAge;
    
    public boolean matches(Student student) {
        return (name == null || student.getName().toLowerCase().contains(name.toLowerCase())) &&
               (grade == null || student.getGrade().equalsIgnoreCase(grade)) &&
               (minGpa == null || student.getGpa() >= minGpa) &&
               (maxGpa == null || student.getGpa() <= maxGpa) &&
               (minAge == null || student.getAge() >= minAge) &&
               (maxAge == null || student.getAge() <= maxAge);
    }
    
    // Builder pattern for criteria construction
    public static class Builder {
        private SearchCriteria criteria = new SearchCriteria();
        
        public Builder withName(String name) {
            criteria.name = name;
            return this;
        }
        
        public Builder withGrade(String grade) {
            criteria.grade = grade;
            return this;
        }
        
        public Builder withGpaRange(Double min, Double max) {
            criteria.minGpa = min;
            criteria.maxGpa = max;
            return this;
        }
        
        public Builder withAgeRange(Integer min, Integer max) {
            criteria.minAge = min;
            criteria.maxAge = max;
            return this;
        }
        
        public SearchCriteria build() {
            return criteria;
        }
    }
}

// Statistics container class
class StudentStatistics {
    private final DoubleSummaryStatistics gpaStats;
    private final Map<String, Long> gradeDistribution;
    private final int totalStudents;
    
    public StudentStatistics(DoubleSummaryStatistics gpaStats, 
                           Map<String, Long> gradeDistribution, 
                           int totalStudents) {
        this.gpaStats = gpaStats;
        this.gradeDistribution = gradeDistribution;
        this.totalStudents = totalStudents;
    }
    
    public void display() {
        System.out.println("\nðŸ“Š STUDENT STATISTICS REPORT");
        System.out.println("==============================");
        System.out.printf("Total Students: %d%n", totalStudents);
        System.out.printf("Average GPA: %.2f%n", gpaStats.getAverage());
        System.out.printf("Highest GPA: %.2f%n", gpaStats.getMax());
        System.out.printf("Lowest GPA: %.2f%n", gpaStats.getMin());
        
        System.out.println("\nGrade Distribution:");
        gradeDistribution.entrySet().stream()
            .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
            .forEach(entry -> 
                System.out.printf("  %s: %d students (%.1f%%)%n", 
                    entry.getKey(), entry.getValue(), 
                    (entry.getValue() * 100.0 / totalStudents))
            );
    }
}
