
## Day-19.md
```markdown
# Daily Diary - Day 19

## File Handling

### Today's Topics
- File Class and Operations
- Reading from Files (FileReader, BufferedReader)
- Writing to Files (FileWriter, BufferedWriter)
- try-with-resources
- File Paths and Directories

### Practical Work
- Created, read, and wrote text files
- Used BufferedReader for efficient reading
- Implemented file copy utility
- Practiced with directory operations

### Code Example
```java
import java.io.*;
import java.nio.file.*;
import java.util.*;

public class FileHandlingDemo {
    public static void main(String[] args) {
        String fileName = "sample.txt";
        String dataFileName = "data.txt";
        
        // Writing to a file
        writeToFile(fileName);
        
        // Reading from a file
        readFromFile(fileName);
        
        // Using try-with-resources for automatic resource management
        writeWithTryWithResources(dataFileName);
        
        // Reading with BufferedReader
        readWithBufferedReader(dataFileName);
        
        // File operations
        performFileOperations(fileName);
        
        // Copy file utility
        copyFile(fileName, "copy_of_sample.txt");
    }
    
    public static void writeToFile(String fileName) {
        try {
            FileWriter writer = new FileWriter(fileName);
            writer.write("Hello, File Handling!\n");
            writer.write("This is line 2.\n");
            writer.write("This is line 3.\n");
            writer.close();
            System.out.println("Successfully wrote to the file: " + fileName);
        } catch (IOException e) {
            System.out.println("An error occurred while writing: " + e.getMessage());
        }
    }
    
    public static void readFromFile(String fileName) {
        try {
            FileReader reader = new FileReader(fileName);
            int character;
            System.out.println("\nReading file character by character:");
            while ((character = reader.read()) != -1) {
                System.out.print((char) character);
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("An error occurred while reading: " + e.getMessage());
        }
    }
    
    public static void writeWithTryWithResources(String fileName) {
        // try-with-resources automatically closes the resources
        try (FileWriter writer = new FileWriter(fileName)) {
            writer.write("Using try-with-resources!\n");
            writer.write("This ensures resources are closed automatically.\n");
            for (int i = 1; i <= 5; i++) {
                writer.write("Line " + i + "\n");
            }
            System.out.println("Successfully wrote using try-with-resources: " + fileName);
        } catch (IOException e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
    
    public static void readWithBufferedReader(String fileName) {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            System.out.println("\nReading file with BufferedReader (line by line):");
            int lineNumber = 1;
            while ((line = reader.readLine()) != null) {
                System.out.println("Line " + lineNumber + ": " + line);
